<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="odoo-obs-to-customer" errorHandlerRef="watcherErrorHandler">
        <from uri="direct:odoo-obs-to-customer" />

		<log loggingLevel="DEBUG" message="Start: route with id ${routeId}" />

        <setProperty name="isInsertOrUpdate">
            <spel>#{getProperty('event').operation == 'c' || getProperty('event').operation == 'u'}</spel>
        </setProperty>

        <choice>
            <when>
                <simple>${exchangeProperty.entity-instance.get('voided')} != true &amp;&amp; ${exchangeProperty.isInsertOrUpdate} == true</simple>
                <setProperty name="obsQnAnsMapKey">
                    <simple>${routeId}-obsQnAnsMap</simple>
                </setProperty>

                <setProperty name="obsQnAnsMap">
                    <method beanType="org.openmrs.eip.AppContext" method="get(${exchangeProperty.obsQnAnsMapKey})" />
                </setProperty>

                <when>
                    <simple>${exchangeProperty.obsQnAnsMap} == null</simple>

                    <log message="Initializing Obs Question Answer Map"/>

                    <setProperty name="obsQnAnsMap">
                        <spel>#{new java.util.HashMap()}</spel>
                    </setProperty>

                    <split parallelProcessing="false">
                        <simple>{{odoo.obs.concept.question.answer.mappings}}</simple>
                        <setProperty name="obsQn">
                            <simple>${body.split("#")[0].trim()}</simple>
                        </setProperty>
                        <setProperty name="obsAnswers">
                            <simple>${body.split("#")[1].trim()}</simple>
                        </setProperty>
                        <setProperty name="obsAnswerSet">
                            <spel>#{new java.util.HashSet()}</spel>
                        </setProperty>

                        <setBody>
                            <simple>${exchangeProperty.obsQn}</simple>
                        </setBody>

                        <to uri="direct:convert-to-concept-uuid-if-is-mapping" />

                        <setProperty name="obsQn">
                            <simple>${body}</simple>
                        </setProperty>

                        <!-- TODO Check the question concept datatype -->

                        <split parallelProcessing="false" >
                            <spel>#{T(org.apache.commons.lang3.StringUtils).split(getProperty('obsAnswers'), '^')}</spel>

                            <setProperty name="obsAns">
                                <simple>${body.trim()}</simple>
                            </setProperty>

                            <setBody>
                                <simple>${exchangeProperty.obsAns}</simple>
                            </setBody>

                            <to uri="direct:convert-to-concept-uuid-if-is-mapping" />

                            <setProperty name="obsAns">
                                <simple>${body}</simple>
                            </setProperty>

                            <script>
                                <spel>#{getProperty('obsAnswerSet').add(getProperty('obsAns'))}</spel>
                            </script>
                        </split>

                        <script>
                            <spel>
                                #{getProperty('obsQnAnsMap').put(getProperty('obsQn'), getProperty('obsAnswerSet'))}
                            </spel>
                        </script>
                    </split>
                    
                    <script>
                        <spel>
                            #{T(org.openmrs.eip.AppContext).add(getProperty('obsQnAnsMapKey'), getProperty('obsQnAnsMap'))}
                        </spel>
                    </script>

                    <log loggingLevel="DEBUG" message="Obs Question Answer Map -> ${exchangeProperty.obsQnAnsMap}"/>
                </when>

                <setProperty name="obsQnUuid">
                    <simple>${exchangeProperty.entity-instance.get('concept').get('uuid')}</simple>
                </setProperty>

                <choice>
                    <when>
                        <spel>#{getProperty('obsQnAnsMap').containsKey(getProperty('obsQnUuid'))}</spel>

                        <log loggingLevel="DEBUG" message="Obs has configured question concept" />

                        <choice>
                            <when>
                                <spel>#{getProperty('obsQnAnsMap').get(getProperty('obsQnUuid')).contains(getProperty('entity-instance').get('value').get('uuid'))}</spel>

                                <log message="Obs has configured question and answer concepts" />

                                <setProperty name="decisionRuleEndpoint">
                                    <simple>${properties:obs.to.customer.decision.rule.endpoint:null}</simple>
                                </setProperty>

                                <choice>
                                    <when>
                                        <simple>${exchangeProperty.decisionRuleEndpoint} != 'null'</simple>
                                        <setBody>
                                            <simple>${exchangeProperty.entity-instance}</simple>
                                        </setBody>

                                        <toD uri="${exchangeProperty.decisionRuleEndpoint}" />

                                        <setProperty name="decisionRulePassed">
                                            <simple>${body}</simple>
                                        </setProperty>
                                    </when>
                                    <otherwise>
                                        <log loggingLevel="DEBUG" message="No decision rule endpoint defined" />
                                    </otherwise>
                                </choice>

                                <choice>
                                    <when>
                                        <simple>${exchangeProperty.decisionRuleEndpoint} == 'null' || ${exchangeProperty.decisionRulePassed} == true</simple>
                                        <setBody>
                                            <simple>${exchangeProperty.entity-instance.get('person').get('uuid')}</simple>
                                        </setBody>
                                        <setProperty name="skipCustomerUpdate">
                                            <simple>true</simple>
                                        </setProperty>

                                        <to uri="direct:patient-uuid-to-odoo-customer" />
                                    </when>
                                    <otherwise>
                                        <log message="Skipping obs event because it failed the decision rules defined in -> ${exchangeProperty.decisionRuleEndpoint}" />
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <log loggingLevel="DEBUG" message="Skipping Obs because the answer concept doesn't match any configured answer" />
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <log loggingLevel="DEBUG" message="Skipping Obs because the question concept doesn't match any configured question" />
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <choice>
                    <when>
                        <simple>${exchangeProperty.isInsertOrUpdate} != true</simple>
                        <log loggingLevel="DEBUG" message="Skipping deleted obs" />
                    </when>
                    <otherwise>
                        <log loggingLevel="DEBUG" message="Skipping voided obs" />
                    </otherwise>
                </choice>
            </otherwise>
        </choice>

		<log loggingLevel="DEBUG" message="End: route with id ${routeId}" />
    </route>
</routes>
